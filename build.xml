<project name="lsc-project" default="help" basedir="." xmlns:artifact="urn:maven-artifact-ant">
  <path id="maven-ant-tasks.classpath" path="${basedir}/lib/maven-ant-tasks-2.0.7.jar" />
  <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant"
           classpathref="maven-ant-tasks.classpath" />

	<!-- look for properties in ~/.lsc-build.properties, ~/lsc.properties -->
	<property file="${user.home}/.${ant.project.name}-build.properties" />
	<property file="${user.home}/build.properties" />
	<property file="build.properties" />
	<property environment="env" />

	<property name="maven.localRepository" value="${user.home}/.m2/repository"/>

	<artifact:remoteRepository id="remote.repository" url="http://lsc-project.org/maven" />
	<artifact:pom id="pom" file="${basedir}/pom.xml" />
	<artifact:localRepository id="localcache" path="${maven.localRepository}" />
	<artifact:dependencies pathId="maven.classpath">
		<pom refid="pom"/>
		<remoteRepository refid="remote.repository" />
		<localrepository refid="localcache" />
	</artifact:dependencies>

	<property name="version" value="${pom.version}" />
	<property name="jar.name" value="${ant.project.name}-${version}.jar" />

	<property name="app.dir" value="app" />
	<property name="build.dir" value="target" />
	<property name="build.dist.dir" value="${build.dir}/dist/${ant.project.name}-${version}" />
	<property name="build.cache.dir" value="${build.dir}/cache" />
	<property name="build.classes.dir" value="${build.dir}/classes" />
	<property name="build.test-classes.dir" value="${build.dir}/classes" />
	<property name="build.deploy.dir" value="${build.dir}/deploy" />
	<property name="build.jar.dir" value="${build.dir}" />
	<property name="build.ressources.dir" value="${build.classes.dir}/ressources" />

	<property name="debian.dir" value="${basedir}/debian" />

	<property name="javadoc.dir" value="docs" />
	<property name="misc.dir" value="misc" />
	<property name="sample.dir" value="${basedir}/sample" />
	<property name="dbmonster.home" value="${sample.dir}/dbmonster" />

	<property name="src.dir" value="src" />
	<property name="src.main.path" value="${src.dir}/main" />
	<property name="src.test.path" value="${src.dir}/test" />

	<property name="src.ressources.path" value="ressources/utf-8" />
	<property name="dst.ressources.path" value="ressources" />


	<property name="generator.parameters" value="" />

	<property name="manifest-version" value="0.0" />
	<property name="manifest" value="${misc.dir}/manifest" />
	<property name="manifest.tmp" value="${build.dir}/optional.manifest" />

	<property name="properties.files" value="**/*.properties" />
	<property name="ldif.files" value="**/*.ldif*" />
	<property name="xml.files" value="**/*.xml" />

	<path id="base.path">
		<path refid="maven.classpath" />
	</path>

	<path id="execution.path">
		<path refid="base.path" />
		<pathelement location="${build.classes.dir}" />
	</path>

	<!--
         ===================================================================
           create directories
         ===================================================================
    -->
	<target name="init" description="Initialize the build structure">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.classes.dir}" />
		<mkdir dir="${build.deploy.dir}" />
		<mkdir dir="${build.jar.dir}" />
		<mkdir dir="${build.cache.dir}" />
		<mkdir dir="${javadoc.dir}" />
	</target>

	<!--
         ===================================================================
           compile core classe
         ===================================================================
    -->
	<target name="compile-app" depends="prepare-env" description="compile app classes">
		<javac destdir="${build.classes.dir}" debug="true" deprecation="false" classpathref="base.path" encoding="utf-8" includeAntRuntime="no" verbose="false">
			<src path="${src.main.path}/java" />
			<src path="${src.test.path}/java" />
		</javac>
	</target>

	<!--
         ===================================================================
           prepare the environment for local execution
         ===================================================================
    -->
	<target name="prepare-env" depends="init" description="Prepare the environment for local execution">
		<mkdir dir="${build.dir}/classes" />
		<echo message="Copying xml and properties files" />
		<copy todir="${build.classes.dir}">
			<fileset dir="${src.main.path}/java" excludes="resources/*" includes="${properties.files},${ldif.files},${xml.files}" />
			<fileset dir="${src.main.path}/resources" includes="${properties.files},${ldif.files},${xml.files}" />
		</copy>
		<copy todir="${build.test-classes.dir}">
			<fileset dir="${src.test.path}/java" excludes="resources/*" includes="${properties.files},${ldif.files},${xml.files}" />
			<fileset dir="${src.test.path}/resources" excludes="hsqldb/*" includes="${properties.files},${ldif.files},${xml.files}" />
		</copy>
	</target>

	<!--
        ===================================================================
          jar everything
        ===================================================================
	-->
	<target name="jar" depends="clean" description="Create the jar files">
                <antcall target="compile-app">
                        <param name="build.test-classes.dir" value="${build.dir}/test-classes" />
                </antcall>

		<tstamp>
			<format property="tstamp" pattern="MM/dd/yyyy HH:mm" locale="en" />
		</tstamp>
		<copy file="${manifest}" tofile="${manifest.tmp}" />
		<manifest file="${manifest.tmp}">
			<attribute name="Build-Time" value="${tstamp}" />
			<attribute name="Build-Author" value="${user.name}" />
			<attribute name="Build-OS" value="${os.name}" />
			<attribute name="Build-OS-Version" value="${os.version}" />
			<section name="org.lsc">
				<attribute name="Extension-name" value="org.lsc" />
				<attribute name="Specification-Title" value="Simple Connectors Project" />
				<attribute name="Specification-Version" value="${manifest-version}" />
				<attribute name="Specification-Vendor" value="Linagora" />
				<attribute name="Implementation-Title" value="org.lsc" />
				<attribute name="Implementation-Version" value="${manifest-version}" />
				<attribute name="Implementation-Vendor" value="Linagora" />
			</section>
		</manifest>
		<jar destfile="${build.jar.dir}/${jar.name}" basedir="${build.classes.dir}" manifest="${manifest.tmp}">
		</jar>
	</target>

	<!--
        ===================================================================
          Clean the project
        ===================================================================
	-->
	<target name="distclean" depends="clean" description="clean the project">
		<delete dir="${debian.dir}" />
	</target>

	<!--
        ===================================================================
          Clean the project
        ===================================================================
	-->
	<target name="clean" description="clean the project">
		<delete dir="${build.dir}" />
		<delete dir="${javadoc.dir}" />
		<ant antfile="${sample.dir}/build.xml" inheritall="true" inheritrefs="true" target="clean" />
	</target>

	<!--
        ===================================================================
          Launch the synchronization engine
        ===================================================================
	-->
	<target name="synchronize" depends="compile-app" description="Import the data to the directory">
		<java classname="org.lsc.Launcher" classpathref="execution.path" fork="true" maxmemory="512M" dir="${build.classes.dir}">
			<arg line="${synchronize.parameters}" />
		</java>
	</target>

	<!--
        ===================================================================
          Generate the Javadoc
        ===================================================================
	-->
	<target name="javadoc" depends="init">
		<mkdir dir="${javadoc.dir}" />
		<javadoc access="protected" author="true" classpathref="execution.path" destdir="doc" doctitle="LSC" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false" source="1.5" splitindex="true" use="true" version="true" verbose="false">
			<sourcepath location="${src.main.path}/java"/>
			<package name="org.lsc"/>
			<package name="org.lsc.utils"/>
			<package name="org.lsc.beans"/>
			<package name="org.lsc.beans.syncoptions"/>
			<package name="org.lsc.service"/>
			<package name="org.lsc.jndi"/>
			<package name="org.lsc.jndi.parser"/>
			<package name="org.lsc.objects"/>
			<package name="org.lsc.objects.flat"/>
			<package name="org.lsc.persistence"/>
		</javadoc>
		<tar destfile="${build.dir}/${ant.project.name}_doc.tar.bz2" compression="bzip2" basedir="${javadoc.dir}" />
	</target>

	<!--
        ===================================================================
          Launch the sample
        ===================================================================
	-->
	<target name="sample" depends="clean,compile-app" description="Launch the sample synchronization">
		<ant antfile="${sample.dir}/build.xml" inheritall="true" inheritrefs="true" target="all" />
	</target>

	<!--
        ===================================================================
      	  Build the distribution
    	===================================================================
        -->
	<target name="dist" depends="distclean" description="create the distribution">
		<mkdir dir="${build.dist.dir}" />
		<copy todir="${build.dist.dir}">
			<fileset dir="${basedir}" id="all">
				<include name="**/*" />
			</fileset>
		</copy>
		<delete file="${build.dist.dir}/.classpath" />
		<delete file="${build.dist.dir}/.project" />
		<delete dir="${build.dist.dir}/.settings" />
		<delete dir="${build.dist.dir}/bin" />
		<delete dir="${build.dist.dir}/build" />
		<delete dir="${build.dist.dir}/target" />
		<delete>
			<fileset dir="${build.dist.dir}">
				<include name="**/CVS" />
				<include name="**/.svn" />
				<include name="**/.cvsignore" />
				<include name="**/.checkstyle" />
			</fileset>
		</delete>
		<tar tarfile="${build.dir}/${ant.project.name}-${version}.tar.bz2" basedir="${build.dist.dir}/.." includes="**" compression="bzip2" />
	</target>

        <!--
        ===================================================================
          Check that the checkstyle component is available
        ===================================================================
        -->
        <target name="checkcheckstyle">
                <available file="${checkstyle.home}" type="dir" property="checkstyle.home.ok" />
                <fail unless="checkstyle.home.ok" message="'checkstyle.home' must be set in build.properties" />
                <path id="checkstyle.path"><fileset dir="${checkstyle.home}" includes="checkstyle*.jar" /></path>
		<taskdef resource="checkstyletask.properties" classpathref="checkstyle.path" />
        </target>

	<!--
	    ==================================================================
	      Run checkstyle on the source code
	    ===================================================================
	-->

	<target name="checkstyle" depends="checkcheckstyle" description="Check the source code style">
		<checkstyle config="${checkstyle.home}/sun_checks.xml">
			<fileset dir="${src.dir}" includes="**/*.java" />
			<formatter type="plain" />
		</checkstyle>
	</target>

	<!--
        ===================================================================
          Generate the Javadoc
        ===================================================================
	-->
	<target name="help">
		<echo>
Ldap Synchronization Connector Buildfile

As an end user, you might not waste your time here. To create new synchronization tasks, download and use
the lsc-sample project directory.

But if you want to improve the LSC software, you are in the good place :).
		</echo>
	</target>
</project>

