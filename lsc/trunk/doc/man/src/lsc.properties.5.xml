<?xml version="1.0" standalone='no'?>
<!DOCTYPE manpage SYSTEM "http://masqmail.cx/lsc-acd-passwords/lsc-acd-passwords.dtd">
<?xml-stylesheet type="text/xsl" href="http://masqmail.cx/lsc-acd-passwords/lsc-acd-passwords.xsl" ?>

<manpage name="lsc.properties" section="1" desc="LSC configuration file">

  <synopsis>
    /usr/local/lsc-acd-passwords/etc/lsc.properties
  </synopsis>

  <description>
    <p>
      lsc.properties is the configuration file of the
      <manref name="lsc" section="1"/> command. It defines all
      parameters to work on the appropriate server.
    </p>
    <p>
      lsc is a command-line tool to synchronize datas in a LDAP directory. This
      tool is generally a special instanciation of the generic LSC
      JAVA tool.
    </p>
    <p>
      Some requirements: JRE 1.5.
    </p>
  </description>

  <section name="Global configuration options">
    <p>
      Options described in this section apply to all source and destination
      services.
    </p>
    <option>
      <p>
        <opt>dn.ldap_schema</opt>
      </p>
      <optdesc>
        LSC needs to know which LDAP tree to interrogate to retrieve the schema
        of all LDAP servers. You should specify a complete LDAP DN, like
        <opt>dn.ldap_schema = cn=subschema</opt> for example.
      </optdesc>
    </option>
    <option>
      <p>
        <opt>dn.real_root</opt>
      </p>
      <optdesc>
        LSC also has to know the real root DN (used to build factice DN for
        service as database for example). You should specify a complete LDAP DN,
        like <opt>dn.real_root = dc=lsc-project,dc=org</opt> for example.
      </optdesc>
    </option>
    <option>
      <p>
        <opt>dn.people</opt>
      </p>
      <optdesc>
        LSC also has to know the RDN of the people's tree. You should specify
        a LDAP RDN, like <opt>dn.people = ou=people</opt> for example.
      </optdesc>
    </option>
    <option>
      <p>
        <opt>lsc.tasks</opt>
      </p>
      <optdesc>
        Name of available LSC tasks, separated by commas. For example, you could
        have <opt>task1, task2, task3</opt> as a value. Be careful that tasks
        also have to be defined.
      </optdesc>
    </option>
  </section>

  <section name="Service configuration options">
    <p>
      These are global configuration options to define the source and destination
      services. You must replace the term <opt>X</opt> in option label by
      <opt>src</opt> to configure source service, or <opt>dst</opt> to configure
      destination service.
    </p>
    <option>
      <p>
        X<opt>.java.naming.factory.initial</opt>
      </p>
      <optdesc>
        Initial context factory to use for data abstraction layer. You could specify the value
        <opt>com.sun.jndi.ldap.LdapCtxFactory</opt>. It should be the same value
        for both LDAP source and destination services.
      </optdesc>
    </option>
    <option>
      <p>
        X<opt>.java.naming.ldap.version</opt>
      </p>
      <optdesc>
        Version of the LDAP protocol to use to connect to the LDAP server.
        <opt>3</opt> is recommended.
      </optdesc>
    </option>
    <option>
      <p>
        X<opt>.java.naming.provider.url</opt>
      </p>
      <optdesc>
        URI LDAP to connect to. Note that specifying the search base in the URI is not
        necessary, but could improve performance.
      </optdesc>
    </option>
    <option>
      <p>
        X<opt>.java.naming.security.authentication</opt>
      </p>
      <optdesc>
        LDAP authentication mechanism to use. Generally, this value does not
        need to be changed. Put <opt>simple</opt> value to use authentication
        based on DN and password.
      </optdesc>
    </option>
    <option>
      <p>
        X<opt>.java.naming.security.principal</opt>
      </p>
      <optdesc>
        LSC uses a DN on the LDAP server to authenticate itself and get rights
        on LDAP data. The value is a complete DN of an existing entry in
        the specified LDAP server.
      </optdesc>
    </option>
    <option>
      <p>
        X<opt>.java.naming.security.credentials</opt>
      </p>
      <optdesc>
        The appropriate password for the DN used above, in case you use simple
        LDAP authentication.
      </optdesc>
    </option>
    <option>
      <p>
        X<opt>.java.naming.referral</opt>
      </p>
      <optdesc>
        Choose how to follow LDAP referrals. Values could be <opt>ignore</opt>,
        <opt>follow</opt>, or <opt>throw</opt>.
      </optdesc>
    </option>
    <option>
      <p>
        X<opt>.java.naming.ldap.derefAliases</opt>
      </p>
      <optdesc>
        Choose how to follow LDAP aliases. Values could be <opt>never</opt>,
        <opt>always</opt>, <opt>search</opt> or <opt>find</opt>.
      </optdesc>
    </option>
  </section>

  <section name="Task configuration options">
    <p>
      This section describes available options to configure a LSC task. You
      should replace <opt>TASKNAME</opt> by a task name specified in the
      global configuration option <opt>lsc.tasks</opt>.
    </p>
    <option>
      <p>
        <opt>lsc.tasks.</opt>TASKNAME<opt>.object</opt>
      </p>
      <optdesc>
        The full name of the JAVA class to use for plain LDAP object. For
        example, for person, you could use
        <opt>org.lsc.objects.inetOrgPerson</opt>. Be careful that
        this class has to exist in this instance of LSC.
      </optdesc>
    </option>
    <option>
      <p>
        <opt>lsc.tasks.</opt>TASKNAME<opt>.bean</opt>
      </p>
      <optdesc>
        The full name of the JAVA BEAN class to use for specialisation of the
        synchronization. For example, for person, you could use
        <opt>org.lsc.beans.inetOrgPersonBean</opt>. Be careful that
        this class has to exist in this instance of LSC.
      </optdesc>
    </option>
    <option>
      <p>
        <opt>lsc.tasks.</opt>TASKNAME<opt>.type</opt>
      </p>
      <optdesc>
        The synchronisation type for this task between the two defined services.
      </optdesc>
    </option>
    <!-- source service -->
    <option>
      <p>
        <opt>lsc.tasks.</opt>TASKNAME<opt>.srcService</opt>
      </p>
      <optdesc>
        The fullname of the JAVA JNDI class to use to retrieve information
        from source service. There is a generic class for LDAP connection, which
        is <opt>org.lsc.jndi.SimpleJndiSrcService</opt>.
      </optdesc>
    </option>
    <option>
      <p>
        <opt>lsc.tasks.</opt>TASKNAME<opt>.srcService.baseDn</opt>
      </p>
      <optdesc>
        The RDN of the people tree on the source service. Generally, it should
        be <opt>ou=people</opt>.
      </optdesc>
    </option>
    <option>
      <p>
        <opt>lsc.tasks.</opt>TASKNAME<opt>.srcService.attrId</opt>
      </p>
      <optdesc>
        The attribute used to identify a user in the source service. This
        attribute must be used in the identity LDAP filter (see filterId below).
        For example, if users have a unique value of the LDAP attribute "uid",
        then you could use the value <opt>uid</opt> here.
      </optdesc>
    </option>
    <option>
      <p>
        <opt>lsc.tasks.</opt>TASKNAME<opt>.srcService.filterAll</opt>
      </p>
      <optdesc>
        This is the "global LDAP filter" used to retrieve all user DNs from the
        source service.
      </optdesc>
    </option>
    <option>
      <p>
        <opt>lsc.tasks.</opt>TASKNAME<opt>.srcService.filterId</opt>
      </p>
      <optdesc>
        This is the "identity LDAP filter" used to retrieve one entry from the
        source service. You have to use the string <opt>{0}</opt> in the
        filter. This string represents a user identifier found in user entry
        returned by the global LDAP filter. So, for example, a filter could be
        <opt>(&amp;(objectclass=inetOrgPerson)(mail=*)(uid={0}))</opt>
      </optdesc>
    </option>
    <option>
      <p>
        <opt>lsc.tasks.</opt>TASKNAME<opt>.srcService.attrs</opt>
      </p>
      <optdesc>
        Here, you specify all returned attributes from the source service for
        one LDAP entry. Generally, these attributes will be used to build
        the new SASL userPassword. Be careful that the value of this option
        has to be same as in the source code of this instance of
        LSC. In fact, the algorithm used is in the JAVA BEAN, in the method
        named by attributes specified here. So, it strictly not recommended
        to modify this value (<opt>loginName userPassword</opt>).
      </optdesc>
    </option>
    <!-- destination service -->
    <option>
      <p>
        <opt>lsc.tasks.</opt>TASKNAME<opt>.dstService</opt>
      </p>
      <optdesc>
        The fullname of the JAVA JNDI class to use to retrieve information
        from destination service. There is a generic class for LDAP connection,
        which is <opt>org.lsc.jndi.SimpleJndiSrcService</opt>.
      </optdesc>
    </option>
    <option>
      <p>
        <opt>lsc.tasks.</opt>TASKNAME<opt>.dstService.baseDn</opt>
      </p>
      <optdesc>
        The RDN of the people tree on the destination service. Generally, it
        should be <opt>ou=people</opt>.
      </optdesc>
    </option>
    <option>
      <p>
        <opt>lsc.tasks.</opt>TASKNAME<opt>.dstService.attrId</opt>
      </p>
      <optdesc>
        The attribute used to identify a user in the destination service. This
        attribute must be used in the identity LDAP filter (see filterId below).
        For example, if users have a unique value of the LDAP attribute "uid",
        then you could use the value <opt>uid</opt> here.
      </optdesc>
    </option>
    <option>
      <p>
        <opt>lsc.tasks.</opt>TASKNAME<opt>.dstService.filterAll</opt>
      </p>
      <optdesc>
        This is the "global LDAP filter" used to retrieve all user DNs from the
        destination service.
      </optdesc>
    </option>
    <option>
      <p>
        <opt>lsc.tasks.</opt>TASKNAME<opt>.dstService.filterId</opt>
      </p>
      <optdesc>
        This is the "identity LDAP filter" used to retrieve one entry from the
        destination service. You have to use the string <opt>{0}</opt> in the
        filter. This string represents a user identifier found in user entry
        returned by the global LDAP filter. So, for example, a filter could be
        <opt>(&amp;(objectclass=inetOrgPerson)(mail=*)(uid={0}))</opt>
      </optdesc>
    </option>
    <option>
      <p>
        <opt>lsc.tasks.</opt>TASKNAME<opt>.dstService.attrs</opt>
      </p>
      <optdesc>
        Here, you specify all returned attributes from the destination service
        one LDAP entry. Generally, these attributes will be used to build
        the new SASL userPassword. Be careful that the value of this option
        has to be same as in the source code of this instance of
        LSC. In fact, the algorithm used is in the JAVA BEAN, in the method
        named by attributes specified here. So, it strictly not recommended
        to modify this value (<opt>loginName userPassword</opt>).
      </optdesc>
    </option>
  </section>

  <section name="Synchronization rule options">
    <p>
      This section describes synchronization rule options available for this
      instance of LSC. You should replace <opt>TASKNAME</opt> by a task name
      specified in the global configuration option <opt>lsc.tasks</opt>.
    </p>
    <option>
      <p>
        <opt>lsc.syncoptions.</opt>TASKNAME
      </p>
      <optdesc>
        This is the full name of the JAVA class used to provide synchronization
        option mechanism. For this instance of LSC, you must use the
        <opt>org.lsc.beans.syncoptions.PropertiesBasedSyncOptions</opt>
        value.
      </optdesc>
    </option>
    <option>
      <p>
        <opt>lsc.syncoptions.</opt>TASKNAME<opt>.default.action</opt>
      </p>
      <optdesc>
        Default action on the destination directory. Here, two values are
        possible, <opt>K</opt> to keep data (means no modification at all), or
        <opt>F</opt> for allowing modification on the data (update, create or
        delete). For this instance of LSC, you must use <opt>K</opt> because
        source and destination service are in fact the same real server.
      </optdesc>
    </option>
    <option>
      <p>
        <opt>lsc.syncoptions.</opt>TASKNAME<opt>.userPassword.action</opt>
      </p>
      <optdesc>
        Choose the action to use onto the userPassword LDAP attribute. As
        default action, you could put <opt>K</opt> to keep password updates,
        or <opt>F</opt> to force modifications.
      </optdesc>
    </option>
  </section>

  <section name = "Authors">
    <p>
      lsc-acd-passwords was written by
        Sebastien Bahloul &lt;sbahloul@linagora.com&gt;,
        Jonathan Clarke &lt;jclarke@linagora.com&gt;,
        Thomas Chemineau &lt;tchemineau@linagora.com&gt;.
    </p>
  </section>

  <section name = "See also">
    <p>
      <manref name="lsc" section="1"/>
    </p>
    <p>
      <url href="http://lsc-project.org/"/>
    </p>
  </section>

  <section name = "Comments">
    <p>
      This man page was written using <manref name="xmltoman" section="1"
      href="http://masqmail.cx/xmltoman/"/>.
    </p>
  </section>

</manpage>

