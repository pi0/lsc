<?xml version="1.0" ?>
<lsc xmlns="http://lsc-project.org/XSD/lsc-core-2.1.xsd" revision="1">
  <connections id="2">
    <ldapConnection>
      <name>opends-src-conn</name>
      <url>ldap://127.0.0.1:33389/dc=lsc-project,dc=org</url>
      <username>cn=Directory Manager</username>
      <password>secret</password>
      <authentication>SIMPLE</authentication>
      <referral>IGNORE</referral>
      <derefAliases>NEVER</derefAliases>
      <version>VERSION_3</version>
      <pageSize>-1</pageSize>
      <factory>com.sun.jndi.ldap.LdapCtxFactory</factory>
      <tlsActivated>false</tlsActivated>
    </ldapConnection>
    <googleAppsConnection>
    	<name>googleapps-dst-conn</name>
    	<!-- The URL for Google Apps connection is the domain  -->
    	<url>domain.com</url>
    	<username>admin@domain.com</username>
    	<password>XXXXXXXXX</password>
    </googleAppsConnection>
  </connections>
  <tasks>
    <task>
      <name>Accounts</name>
      <bean>org.lsc.beans.SimpleBean</bean>
      <ldapSourceService>
        <name>opends-source-service</name>
        <connection reference="opends-src-conn" />
        <baseDn>ou=People,dc=lsc-project,dc=org</baseDn>
        <pivotAttributes>
          <string>uid</string>
        </pivotAttributes>
        <fetchedAttributes>
          <string>givenName</string>
          <string>sn</string>
          <string>userPassword</string>
          <string>uid</string>
          <string>mail</string>
        </fetchedAttributes>
        <getAllFilter>(&amp;(objectClass=inetorgperson)(uid=*)(sn=*)(givenName=*)(mail=*))</getAllFilter>
        <getOneFilter>(&amp;(objectClass=inetorgperson)(uid={uid})(sn=*)(givenName=*)(mail=*))</getOneFilter>
        <cleanFilter>(&amp;(objectClass=inetorgperson)(uid={uid}))</cleanFilter>
        <!-- <serverType>OpenDS</serverType> -->
      </ldapSourceService>
      <googleAppsDestinationService>
        <name>googleapps-dst-service</name>
        <connection reference="googleapps-dst-conn" />
        <apiCategory>UserAccounts</apiCategory>
        <quotaLimitInMb>1000</quotaLimitInMb>
      </googleAppsDestinationService>
      <propertiesBasedSyncOptions>
        <mainIdentifier>srcBean.getDatasetFirstValueById("uid")</mainIdentifier>
        <defaultDelimiter>;</defaultDelimiter>
        <defaultPolicy>FORCE</defaultPolicy>
        <dataset>
          <name>userPassword</name>
          <!-- Don't use FORCE to update the password because Google never send it again so you will try to update id on every run ! -->
          <policy>KEEP</policy>
          <createValues>
            <string>
            		( srcBean.getDatasetFirstValueById("userPassword") != null ? 
            			( srcBean.getDatasetFirstValueById("userPassword").startsWith("{") &amp;&amp; srcBean.getDatasetFirstValueById("userPassword").contains("}") ?
            				StringUtils.Base64toBase16(srcBean.getDatasetFirstValueById("userPassword").substring(srcBean.getDatasetFirstValueById("userPassword").indexOf("}")+1)) 
            				: srcBean.getDatasetFirstValueById("userPassword") 
            			) : srcBean.getDatasetFirstValueById("employeeNumber")
            		)
            </string>
          </createValues>
        </dataset>
        <dataset>
          <name>quotaInMb</name>
          <policy>KEEP</policy>
          <forceValues>
            <string>"7000"</string>
          </forceValues>
        </dataset>
        <dataset>
          <!-- Google Apps only supports MD5 and SHA-1 password. To match it, this dataset looks for the {SHA} or {MD5} prefix
          		starting the LDAP password -->
          <name>userPasswordHash</name>
          <policy>KEEP</policy>
          <createValues>
            <string>
            var hashFunction = (srcBean.getDatasetFirstValueById("userPassword") != null &amp;&amp; srcBean.getDatasetFirstValueById("userPassword").contains("{") ? srcBean.getDatasetFirstValueById("userPassword").substring(1, srcBean.getDatasetFirstValueById("userPassword").indexOf("}")) : "");
            if(hashFunction == "") {
            	""
            } else if (hashFunction == "SHA") {
            	"SHA-1"
            } else if (hashFunction == "MD5"){
            	"MD5"
            } else {
            	throw "Unsupported hash password scheme: " + hashFunction
            }
            </string>
          </createValues>
        </dataset>
      </propertiesBasedSyncOptions>
    </task>
  </tasks>
</lsc>
