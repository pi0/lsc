% Ldap Synchronization Connector (LSC) - User Guide
% Jonathan Clarke
% SÃ©bastien Bahloul
% 19/01/2012

The latest version of this document is available online at
[http://lsc-project.org/user-guide/](http://lsc-project.org/user-guide/). You
can also download a [PDF
version](http://lsc-project.org/user-guide/LSC-User-Guide.pdf).

This guide covers versions **2.0.\*** of LSC. Other incomplete versions are available (**1.2.\***).

# Introduction

Ldap Synchronization Connector, or LSC, is a tool for synchronizing
data repositories, with a particular focus on identity information.

It can read from a variety of different sources, perform limitless
transformations of data on-the-fly and write the results to a LDAP
directory. The tool is designed to be fast, and extensible in all
areas.

It is an open source project, released under the BSD license.

This document is a hands-on guide to all aspects of using LSC:

1.  Basic principles
2.  Obtaining and installing LSC
3.  Configuring LSC
4.  Running LSC
5.  Integrating LSC to a running system (including best pratices)
6.  Troubleshooting and getting help

This guide aims to be exhaustive. As such, the reader is not
expected to read it from cover to cover, but is encouraged to skip
to the sections he's interested in. A
[quick-start guide](http://lsc-project.org/wiki/documentation/2.0/sample)
is also available for the impatient.

# Basic principles

As LSC was originally developed for LDAP server, some vocabulary are related to these types of servers. In fact some chapters also
describe data integration for database, ESB, ...

## Objects and datasets

All data is split up into two elements:

- **Object**, which are containers. It can be considered equivalent to an *entry* inside a directory, a *table line* inside a database
or simply an *account* ("this account exists or it does not")
- **Main identifier**, which is the unique identifier of the object in its own space (database, directory, ...)
- **Datasets**, which qualify the object. These are also commonly called attributes, fields, elements or keys ("this account is called jdoe")

## Pivot datasets

To synchronize data, LSC must be able to match up objects in the source and in the destination. This is an important prerequisite to synchronizing your data: 
a **unique pivot dataset** must be available in all objects and in both your source and your destination.

This unique set may be a combination of several data (for example: surname and first name).

Commonly used pivot datasets include email addresses, or serial numbers (such as UUIDs).

## Unique (or main) identifier

LSC is looking for the data inside the source and the destination service by listing available objects. Most datasource provide a unique identifier
that is used by the LSC to get the full datasets of the corresponding object (and also to fill the log !). 
It can be either a distinguish name in a directory, a primary key inside a database table,
a UUID for the event in a ESB, ...

## One-to-one object matching

LSC will try and match every object in the source to one, and only one object in the destination. Matching is done by searching on the pivot datasets.

Synchronizing several objects to one, or one objects to several could be achieved by implementing multiple synchronizations, but is a hack.

## One-way only

LSC synchronizations are **one-way only**: from a source to a destination.

It usually only makes sense to copy data in one direction. However, if you need to copy a different set of data back, you can simply implement a separate synchronization by reverting
the source and the destination.

## Four operations available

For every object, LSC may perform one of the following operations (or nothing):

1. Create a new object : if an object from the source was not found in the destination service
2. Delete an old object : if an object in the destination was not found in the source service
3. Update an existing object : if attributes vary between the destination and the calculated transformations from the source service
4. Change the unique identifier of an existing object : if the object 

Please note that one and only one of these operations is performed on each run. So, if a change of the unique object identifier is done, but some of it's datasets also need updating, this will only happen over two runs.

## Transformations



## Forcing, keeping or merging values

When updating a service, datasets values can be configured to be:

1. forced: source service values will override the data in the destination service. Of course, if the data are the same, they won't be rewritten, but if they have changed
in the destination service, they will be updated with the values computes   
2. kept: source service will be used to fill the object if no value is stored in the destination service. This could occur either at the creation of the object or if the destination 
values are deleted
3. merged: all the source and the destination values will be merged to be written in the destination. 

When configuring the LSC, you will see that different values can be specified to be used by these various modes :

1. create values: these values are only used when creating the object
2. force values: only used if the the mode is FORCE to replace the destination service values 
3. default values:   when no values are specified inside the source (when updating or when creating and if no create values are specified), the values compared with the destination service are those.

# Obtaining and installing LSC

## Choosing the right version

Several versions of LSC are available. As with many Open Source
projects, the main development focus is on one branch (the trunk), while
maintenance is performed on the previous branch (v2.0). Choosing the right
version is not always easy when starting out with new software.
This section offers guidance.

### Version numbering

A full version number looks something like **2.0**. LSC version numbers are in two parts:

- The two first digits represent the **major** branch number, for example
  **2.0**.
- The second digit represents a **minor** release within that branch, similar to
  a patch level **0**.

A minor release (patch level increase, such as 1.1.0 to 1.1.1) never breaks
functionality, and is only released to fix bugs and it may include new features. It will never drop existing functionality
or change configuration file format.

 Before releasing a new major version, the development team will provide some SNAPSHOT build (2.0-SNAPSHOT) and Release Candidate (2.0rc1).  

### Current version

At the time of writing, the **2.0** branch is the most recent version available,
and is fully supported.

The **1.1** and **1.2** branches are neither longer actively developed, and nor longer
supported. The latest and most stable versions of LSC are
always shown on the project's website at [http://lsc-project.org/](http://lsc-project.org).

Development work is currently transitioning between improving this branch,
**trunk**, and implementing new features for future versions.

## Downloading and installing the software

### Dependencies

To run LSC you need Oracle's Java Virtual Machine (JVM), version 1.6 or higher. Download and install [Oracle's Java Runtime Edition (JRE)](http://java.oracle.com/), if you don't already have it installed. Please note that it may be simpler to use a pre-packaged version from your operating system.

All other dependencies required by LSC are included in the download.

### Downloading

LSC is distributed like most programs, as an archive to download and install.

There are several formats available. They all lead to the same result, just
choose your preference from the following:

-	Graphical installer based in a JAR file. After download, run this with java
	-jar *filename*.
-	Compressed archive in a gzipped tarball.
-	Compressed archive in a zip archive.

See all downloads at
[http://tools.lsc-project.org/files](http://tools.lsc-project.org/files).

**Note:** .bz2 files can be decompressed using
[7-Zip](http://www.7-zip.org/) on Windows.

### Installing

Depending on the packaging you chose, either run the graphical installer as a
Java executable (java -jar *filename*), or extract the compressed archive
to the location of your choice.

In either case, LSC will be installed in a self-contained directory, including
all dependencies required to run.

Once installed, you should see the following folders in the installation
directory:

-	*bin* (programs to launch and interact with LSC)
-	*etc* (configuration files)
-	*lib* (software dependencies)

If your synchronization tasks require a third party library (database connection jar, ...), either modify the CLASSPATH environment variable so that it points to the required jar files
or simply copy them to the lib sub directory (but take care when you will update LSC because you will need to copy it again in the new LSC version lib sub directory)

# Configuring LSC

There are several different aspects to configuring a task
using LSC:

1.  Source connector configuration
2.  Destination connector configuration
3.  Data transformation configuration
4.  Logging configuration

Within the installation directory, all configuration files are located in the
**etc/** directory. Most configuration is done in the **lsc.xml** file,
except for logging which is setup in **logback.xml**. Each source connector may
use additional configuration files - such as is the case for the database source
connector used in **Database** connectors.

## Source connector configuration

## Destination connector configuration

## Data transformation configuration

## Logging configuration

# Running LSC

## Run once

## Start and forget

# Integrating LSC to a running system (including best pratices)

... Work in progress ...

## Choosing your mode

### Starting LSC as a daemon

### Periodic execution

## Log integration.
 and logrotate integration. 

## Supervision.

# Troubleshooting and getting help

... Work in progress ...

## Contact us

IRC: #lsc-project@FreeNode

Mailing lists: 
-  Announce mailing list (very small volume): lsc-announce@lists.lsc-project.org
-  Users mailing list: lsc-users@lists.lsc-project.org
-  Developers mailing list: lsc-dev@lists.lsc-project.org


